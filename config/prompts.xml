<?xml version="1.0" encoding="UTF-8"?>
<root xmlns="http://nlweb.ai/base"
      xmlns:so="http://www.schema.org/"
      xmlns:rdfs="http://www.w3.org/rdfs">

<Item>

    <Prompt ref="DetectIrrelevantQueryPrompt">
      <promptString>
        The user is querying the site {request.site} which has information about {site.itemType}s.
        Is the site utterly completely irrelevant to the user's query? The question is not whether this is the best site for answering the query, but if there is nothing on the site that is likely to be relevant for the query. If the site is irrelevant, add an explanation. Otherwise, leave the explanation blank.
        The user query is: '{request.query}'

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "site_is_irrelevant_to_query": "boolean",
          "explanation_for_irrelevance": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "site_is_irrelevant_to_query": "True or False",
          "explanation_for_irrelevance": "Explanation for why the site is irrelevant"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="PrevQueryDecontextualizer">
      <promptString>
        The user is querying the site {request.site} which has {site.itemType}s.
        Rewrite the query, incorporating the context of the previous queries and answers. Keep the decontextualized query short and do not reference the site. If the query very clearly does not reference earlier queries, don't change it. Err on the side of incorporating context. If unsure, assume it's a follow-up.
        The user's query is: {request.rawQuery}.
        Previous queries were: {request.previousQueries}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "requires_decontextualization": "boolean",
          "decontextualized_query": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "requires_decontextualization": "True or False",
          "decontextualized_query": "The rewritten query, if decontextualization is required"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DecontextualizeContextPrompt">
      <promptString>
        The user is asking the following question: '{request.rawQuery}' in the context of an item with the description: {request.contextDescription}. Previous answers provided were: {request.prevAnswers}.
        Rewrite the query to decontextualize it so that it can be answered without reference to earlier queries, previous answers, or the item description.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "decontextualized_query": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "decontextualized_query": "The rewritten query"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="FullDecontextualizePrompt">
      <promptString>
        The user is asking the following question: '{request.rawQuery}' in the context of an item with the description: {request.contextDescription}. Previous queries from the user were: {request.previousQueries}. Previous answers provided were: {request.prevAnswers}.
        Rewrite the query to decontextualize it so that it can be answered without reference to earlier queries, previous answers, or the item description.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "decontextualized_query": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "decontextualized_query": "The rewritten query"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DetectMemoryRequestPrompt">
      <promptString>
        Analyze the user's statement. Is the user asking you to remember something relevant for future queries, not just the current one? If so, what is it? The user must explicitly ask to remember. Keep the memory_request short.
        The user's query is: {request.rawQuery}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "is_memory_request": "boolean",
          "memory_request": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "is_memory_request": "True or False",
          "memory_request": "The memory request, if any"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DetectMultiItemTypeQueryPrompt">
      <promptString>
        Analyze the query. Is the user asking for only one kind of item or multiple? If multiple, construct independent queries for each kind, separated by semicolons.
        The user's query is: {request.query}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "single_item_type_query": "boolean",
          "item_queries": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "single_item_type_query": "True or False",
          "item_queries": "Separate queries for each of the kinds of items, separated by commas"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DetectItemTypePrompt">
      <promptString>
        What is the kind of item the query is likely seeking: {request.query}
        Common item types: Recipe, Movie, Product, Restaurant, Statistics, Item.
        If asking about statistical data (population, income, demographics, economic indicators for geographic locations), return "Statistics".

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "item_type": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "item_type": ""
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DetectQueryTypePrompt">
      <promptString>
        Analyze the query. Is the user asking for a list of {site.itemType} that match a description, or details of a particular {site.itemType}? If details of a particular item, what is its name and what details are requested?
        The user's query is: {request.query}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "item_details_query": "boolean",
          "item_title": "string",
          "details_being_asked": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "item_details_query": "True or False",
          "item_title": "The title of the item type, if any",
          "details_being_asked": "what details the user is asking for"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="RankingPromptWithExplanation">
      <promptString>
        Assign a score (0-100) to the {site.itemType} for relevance to the user's question. Provide a short description relevant to the user's question. Explain the item's relevance without mentioning the user's question, score, or "relevance". If score &lt; 75, include why it's still relevant in the description.
        The user's question is: {request.query}. The item's description is {item.description}

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer",
          "description": "string",
          "explanation": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "description": "short description of the item",
          "explanation": "explanation of the relevance of the item to the user's question"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="RankingPrompt">
      <promptString>
        Assign a score (0-100) to the item for relevance to the user's question. If score &gt; 50, provide a short description highlighting relevance without mentioning the user's question. Explain the item's relevance without mentioning the user's question, score, or "relevance". If score &lt; 75, include why it's still relevant in the description.
        The user's question is: "{request.query}". The item's description in schema.org format is "{item.description}".

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer",
          "description": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "description": "short description of the item"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="RankingPromptForGenerate">
      <promptString>
        Assign a score (0-100) to the item based on its usefulness for answering the user's question. Include a short description of the item.
        The user's question is: "{request.query}".
        The item in schema.org format is: "{item.description}".

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score" : "integer",
          "description" : "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score" : "integer between 0 and 100",
          "description" : "short description of the item"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="SynthesizePromptForGenerate">
      <promptString>
        Given the following items, synthesize an answer to the user's question. Include the most relevant items. For each included item, provide its URL in the 'urls' field. Do not include URLs in the 'answer' field.
        The user's question is: {request.query}.
        The items are: {request.answers}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "answer" : "string",
          "urls" : "array of strings"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "answer" : "string",
          "urls" : "urls of the items included in the answer"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="SummarizeResultsPrompt">
      <promptString>
        Given the following items, summarize the results as an answer to the user's question.
        The user's question is: {request.query}.
        The items are: {request.answers}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "summary" : "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "summary" : "string"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="DescriptionPromptForGenerate">
      <promptString>
        The item with the following description is used to answer the user's question. Provide a description of the item, in the context of the user's question and the overall answer.
        The user's question is: {request.query}.
        The overall answer is: {request.answer}.
        The item is: {item.description}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "description" : "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "description" : "string"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="ItemMatchingPrompt">
      <promptString>
        The user is looking for some details about: {request.item_name}. Assign a score (0-100) for how well the item description matches what the user seeks. If score &gt; 75, extract ONLY the explicitly requested details.
        The details requested are: {request.details_requested}.
        Item description: {item.description}

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer",
          "item_details": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_details": "the specific details requested by the user"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="ExtractItemDetailsPrompt">
      <promptString>
        Extract ONLY the specific details the user is asking for from the item description. Be comprehensive but focused.
        User's query: {request.query}
        Details requested: {request.details_requested}
        Item description: {item.description}

        For example: If asking for "ingredients", include the full ingredients list. If asking for "price", include price and variations. If asking for "nutrition", include all nutritional info. If asking for "description", provide a clear summary. If asking for "instructions", include step-by-step.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "item_name": "string",
          "requested_details": "string",
          "additional_context": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "item_name": "the name of the item",
          "requested_details": "the specific details requested by the user, formatted clearly",
          "additional_context": "any important context about these details (optional)"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="FindItemPrompt">
      <promptString>
        The user is looking for an item named/described as: {item.name}.
        Assign a score (0-100) for how well the item description matches what the user seeks.
        Item description: {item.description}

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="CompareItemsPrompt">
      <promptString>
        The user wants a comparison between two items with descriptions: Item 1: {request.item1_description} vs Item 2: {request.item2_description}. The user is asking for details: {request.details_requested}.
        Provide a comparison, highlighting differences and similarities.
        The user's query is: {request.query}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "comparison": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "comparison": "Comparison of the two items"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="CompareItemDetailsPrompt">
      <promptString>
        The user wants a comparison between two items with descriptions: Item 1: {request.item1_description} and Item 2: {request.item2_description}. The user is asking for details: {request.details_requested}.
        Provide a comparison, highlighting differences and similarities.
        The user's query is: {request.query}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "comparison": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "comparison": "Comparison of the two items"
        }
      </returnStruc>
    </Prompt>

  </Item>

  <Recipe>
    <Prompt ref="DetectMemoryRequestPrompt">
      <promptString>
        Analyze the user's statement. Is the user asking you to remember a dietary constraint (e.g., vegetarian, kosher, gluten/lactose intolerance) for future queries? If so, what is it? The user must explicitly ask to remember. Keep the memory_request short.
        The user's query is: {request.rawQuery}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "is_memory_request": "boolean",
          "memory_request": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "is_memory_request": "True or False",
          "memory_request": "The memory request, if any"
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="ItemMatchingPrompt">
      <promptString>
        The user is looking for some details about: {request.item_name} and their query is: {request.query}.
        Assign a score (0-100) for how well the item description matches. If score &gt; 75, extract ONLY the explicitly requested details. Be direct and specific.
        Details requested: {request.details_requested}.
        Item description: {item.description}

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer",
          "item_details": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_details": "the specific details requested by the user"
        }
      </returnStruc>
    </Prompt>
  </Recipe>

  <RealEstate>
    <Prompt ref="RequiredInfoPrompt">
      <promptString>
        Answering the user's query requires location and price range. Is this information available from the current query, previous queries, context, or memory?
        The user's query is: {request.query}. Previous queries are: {request.previousQueries}.

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "required_info_found": "boolean",
          "user_question": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "required_info_found": "True or False",
          "user_question": "Question to ask the user for the required information"
        }
      </returnStruc>
    </Prompt>
  </RealEstate>

  <Item>
    <Prompt ref="EnsembleBasePrompt">
      <promptString>
        Based on the user's request: "{request.query}"
        Searched for: {ensemble.queries}
        Search results: {ensemble.results}

        Create a cohesive recommendation.
        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "theme": "string",
          "items": [
            {
              "category": "string",
              "name": "string",
              "description": "string",
              "why_recommended": "string",
              "details": {}
            }
          ],
          "overall_tips": ["string"]
        }
        ```
      </promptString>
      <returnStruc>
        {
          "theme": "Brief description of the overall recommendation theme",
          "items": [
            {
              "category": "Category name (e.g., Appetizer, Museum, Footwear)",
              "name": "Specific item name",
              "description": "Detailed description",
              "why_recommended": "Why this item fits the request",
              "details": {}
            }
          ],
          "overall_tips": ["Any general tips or considerations"]
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="EnsembleMealPlanningPrompt">
      <promptString>
        Based on the user's request: "{request.query}"
        Searched for: {ensemble.queries}
        Search results: {ensemble.results}

        Create a complete meal recommendation (Appetizer, Main, Dessert). For each course, provide name, description, why it complements others, relevant details, and URL. Ensure courses work well together.
        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "theme": "string",
          "items": [
            {
              "category": "string",
              "name": "string",
              "description": "string",
              "why_recommended": "string",
              "url": "string",
              "details": {
                "prep_time": "string",
                "difficulty": "string",
                "dietary_info": "string"
              }
            }
          ],
          "overall_tips": ["string"]
        }
        ```
      </promptString>
      <returnStruc>
        {
          "theme": "Brief description of the meal theme",
          "items": [
            {
              "category": "Course type (Appetizer, Main Course, or Dessert)",
              "name": "Specific dish name",
              "description": "Detailed description of the dish",
              "why_recommended": "Why this dish fits the meal",
              "url": "URL of the item",
              "details": {
                "prep_time": "Preparation time",
                "difficulty": "Easy/Medium/Hard",
                "dietary_info": "Any dietary considerations"
              }
            }
          ],
          "overall_tips": ["Tips for preparing or serving the meal"]
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="EnsembleTravelItineraryPrompt">
      <promptString>
        Based on the user's request: "{request.query}"
        Searched for: {ensemble.queries}
        Search results: {ensemble.results}

        Create a travel itinerary (Attractions/Museums, Restaurants, suggested order). For each recommendation, provide name, location, why it's worth visiting, time needed, connection to others, practical tips, and URL.
        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "theme": "string",
          "items": [
            {
              "category": "string",
              "name": "string",
              "description": "string",
              "why_recommended": "string",
              "url": "string",
              "details": {
                "location": "string",
                "time_needed": "string",
                "best_time": "string",
                "tickets": "string",
                "reservations": "string"
              }
            }
          ],
          "overall_tips": ["string"]
        }
        ```
      </promptString>
      <returnStruc>
        {
          "theme": "Brief description of the itinerary theme",
          "items": [
            {
              "category": "Category (Attraction, Museum, Restaurant, etc.)",
              "name": "Specific venue name",
              "description": "Detailed description",
              "why_recommended": "Why this fits the itinerary",
              "url": "URL of the item",
              "details": {
                "location": "Address or area",
                "time_needed": "Estimated duration",
                "best_time": "Recommended time to visit",
                "tickets": "Ticket information if applicable",
                "reservations": "Reservation requirements"
              }
            }
          ],
          "overall_tips": ["General tips for the itinerary"]
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="EnsembleOutfitPrompt">
      <promptString>
        Based on the user's request: "{request.query}"
        Searched for: {ensemble.queries}
        Search results: {ensemble.results}

        Create a complete outfit recommendation (Essential items, Accessories, Additional considerations). For each item, provide type, suitability, key features, URL, and alternatives. Consider weather, activity level, and safety.
        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "theme": "string",
          "items": [
            {
              "category": "string",
              "name": "string",
              "description": "string",
              "why_recommended": "string",
              "url": "string",
              "details": {
                "key_features": "string",
                "alternatives": "string",
                "weather_suitability": "string",
                "activity_level": "string"
              }
            }
          ],
          "overall_tips": ["string"]
        }
        ```
      </promptString>
      <returnStruc>
        {
          "theme": "Brief description of the outfit purpose",
          "items": [
            {
              "category": "Category (Footwear, Jacket, Accessories, etc.)",
              "name": "Specific item type",
              "description": "Detailed description",
              "why_recommended": "Why this item is suitable",
              "url": "URL of the item",
              "details": {
                "key_features": "Important features to look for",
                "alternatives": "Alternative options",
                "weather_suitability": "How it handles weather conditions",
                "activity_level": "Suitable activity level"
              }
            }
          ],
          "overall_tips": ["General outfit tips and safety considerations"]
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="EnsembleGenericPrompt">
      <promptString>
        Based on the user's request: "{request.query}"
        Searched for: {ensemble.queries}
        Search results: {ensemble.results}

        Create a cohesive set of recommendations that work well together. For each item, explain why it's recommended and how it complements others. Include the URL.
        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "theme": "string",
          "items": [
            {
              "category": "string",
              "name": "string",
              "description": "string",
              "why_recommended": "string",
              "url": "string",
              "details": {}
            }
          ],
          "overall_tips": ["string"]
        }
        ```
      </promptString>
      <returnStruc>
        {
          "theme": "Brief description of the recommendation theme",
          "items": [
            {
              "category": "Item category",
              "name": "Specific item name",
              "description": "Detailed description",
              "why_recommended": "Why this item fits the request",
              "url": "URL of the item",
              "details": {}
            }
          ],
          "overall_tips": ["General tips or considerations"]
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="EnsembleItemRankingPrompt">
      <promptString>
        Given the user's query: "{request.query}"
        And this item: Name: {item.name}, Type: {item.type}, Description: {item.description}
        Rate its relevance for answering the query (0-100). Consider: Does it directly address what the user is looking for? Is it the right type of item (e.g., restaurant vs attraction)? Does it match any specific criteria mentioned in the query?

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100"
        }
      </returnStruc>
    </Prompt>
  </Item>

  <Statistics>
    <Prompt ref="DetectItemTypePrompt">
      <promptString>
        What is the kind of item the query is likely seeking: {request.query}
        Common item types: Recipe, Movie, Product, Restaurant, Statistics, Item.
        If asking about statistical data (population, income, demographics, economic indicators for geographic locations), return "Statistics".

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "item_type": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "item_type": ""
        }
      </returnStruc>
    </Prompt>

    <Prompt ref="RankingPrompt">
      <promptString>
        Assign a score (0-100) to the statistical data point for relevance to the user's question about demographic or economic indicators.
        The user's question is: "{request.query}".
        The data point is: "{item.description}".

        **RESPONSE FORMAT: ONLY output a single JSON object. DO NOT include any other text, explanations, or markdown outside the JSON block.**
        ```json
        {
          "score": "integer",
          "description": "string"
        }
        ```
      </promptString>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "description": "short description of the data point"
        }
      </returnStruc>
    </Prompt>
  </Statistics>

</root>